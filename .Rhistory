# had on international Revenue of Disney Movies
paste("We chose 2019 to 2023 because we wanted to see what
impact Covid had on international Revenue of Disney Movies")
#| message: false
dis_plus = read_csv(file = 'https://www.dropbox.com/scl/fi/5kt0kzhnpop3ub9qavnzm/dis_plus.csv?rlkey=b3eqvyhthfpgxxd7sdzzru00y&st=aw0bree0&raw=1')
dis_plus <- dis_plus |>
mutate(qtr_over_qtr_growth = round((dis_subs - lag(dis_subs)) / dis_subs * 100, 3)) |>
mutate(qtr_over_qtr_growth = ifelse(is.na(qtr_over_qtr_growth), 0, qtr_over_qtr_growth))
greatest_growth_year <- dis_plus |>
filter(qtr_over_qtr_growth == max(qtr_over_qtr_growth, na.rm = T)) |>
pull(year)
greatest_growth_qtr <- dis_plus |>
filter(qtr_over_qtr_growth == max(qtr_over_qtr_growth, na.rm = T)) |>
pull(qtr)
# the greatest rate of growth happened during year 2020 qtr 3.
paste("The greatest rate of growth happened during year", greatest_growth_year, "qtr", greatest_growth_qtr)
dis_plus |>
gt() |>
tab_header(
title = "Quarter-Over-Quarter Growth Rate for Each Pair of Consecutive Quarter"
) |>
cols_label(
year = html("Year"),
qtr = html("Quarter"),
dis_subs = html("Disney Subscribers (in Millions)"),
nflx_subs = html("Netflix Subscribers (in Millions)"),
qtr_over_qtr_growth = html("Quarter-Over-Quarter Growth Rate")
) |>
opt_stylize(style = 6, color = "green")
annualized_sum <- dis_plus |>
group_by(year) |>
summarise(avg_qtr_subs = sum(dis_subs) / 4,
highest_qtr_subs = max(dis_subs),
lowest_qtr_subs = min(dis_subs),
range_qtr_subs = highest_qtr_subs - lowest_qtr_subs,
)
annualized_sum |>
gt() |>
tab_header(
title = "Annualized Summaries for Disney+ Subscribers (in Millions)"
) |>
cols_label(
year = html("Year"),
avg_qtr_subs = html("Average Quarterly Subscribers"),
highest_qtr_subs = html("Highest Quarterly Subscribers"),
lowest_qtr_subs = html("Lowest Quarterly Subscribers"),
range_qtr_subs = html("Range of Quarterly Subscribers"),
) |>
opt_stylize(style = 6, color = "blue")
dis_plus <- dis_plus |>
mutate(year_qtr = paste0("Q", qtr, "-", year))
highchart() |>
hc_add_series(
data = dis_plus,
mapping = hcaes(x = year_qtr, y = dis_subs),
type = 'line',
color = 'orange',
yAxis = 0,
name = "Disney+ Subscribers (Millions)"
) |>
hc_add_series(
data = dis_plus,
mapping = hcaes(x = year_qtr, y = nflx_subs),
type = 'line',
color = 'red',
yAxis = 1,
name = "Subscriber Counts for Disney+ and Netflix"
) |>
hc_yAxis_multiples(
list(
title = list(
text = 'Disney+ Subscribers (in Millions)',
style = list(color = "orange")
)
),
list(
opposite = TRUE,
title = list(
text = 'Netflix Subscribers (in Millions)',
style = list(color = "red")
)
)
) |>
hc_title(
text = "Subscriber Counts for Disney+ and Netflix",
align = "center"
) |>
hc_xAxis(
title = list(text = "Year and Quarter"),
categories = unique(dis_plus$year_qtr),
tickInterval = 1
) |>
hc_legend(
align = "left",
verticalAlign = "bottom"
)
#| message: false
dis_stock = read_csv(file = 'https://www.dropbox.com/scl/fi/x25yj3rp81dn1tipguqk5/dis_stock.csv?rlkey=6j7gkdei81aipn0kem0i34tit&st=rps4871p&raw=1')
filtered_dis_stocks <- dis_stock |>
mutate(percentage = ((close - open) / open) * 100 ) |>
filter(percentage >= 5 | percentage <= -5)
filtered_dis_stocks |>
gt() |>
tab_header(
title = "Trading Days of DIS Stocks with at least 5% Gain or Loss"
) |>
cols_label(
date = html("Date"),
open = html("Open"),
high = html("High"),
low = html("Low"),
close = html("Close"),
volume = html("Volume"),
spx = html("SPX"),
shrsout = html("Outstanding Shares"),
percentage = html("Chang Over 5%")
) |>
opt_stylize(style = 6, color = "pink")
dis_stock_with_market_cap <-  dis_stock |>
mutate(market_cap = close * shrsout,
date_movement = abs(market_cap - lag(market_cap)))
dis_stock_with_market_cap <- dis_stock_with_market_cap |>
mutate(date_movement = ifelse(is.na(date_movement), 0, date_movement))
peak_market_cap_date = dis_stock_with_market_cap |>
filter(market_cap == max(market_cap)) |>
pull(date)
# the market capitalization of DIS was at its peak on 2021-03-08
paste("The market capitalization of DIS was at its peak on", peak_market_cap_date)
greatest_monthly_movement <- dis_stock_with_market_cap |>
filter(date_movement == max(date_movement)) |>
pull(date)
# the greatest movement of market cap happened in Decemeber of 2020, specifically on 2020-12-10
paste("The greatest movement of market cap happened in Decemeber of 2020, specifically on", greatest_monthly_movement)
dis_stock_dup <- dis_stock %>%
filter(date >= as.Date("2021-01-02"))
init_dis_price <- dis_stock_dup %>%
first(dis_stock_dup) %>%
pull(close)
init_spx_price <- dis_stock_dup %>%
first(dis_stock_dup) %>%
pull(spx)
dis_shares <- 1 / init_dis_price
spx_shares <- 1 / init_spx_price
stock <- dis_stock %>%
filter(date >= as.Date("2021-01-02") & date <= as.Date("2024-12-31")) %>%
mutate(
dis_growth = dis_shares * close,
spx_growth = spx_shares * spx,
) %>%
select(date, dis_growth, spx_growth)
plot <- stock %>%
ggplot(aes(x = date)) +
geom_line(aes(y = dis_growth, color = "DIS"), linewidth = 1) +
geom_line(aes(y = spx_growth, color = "S&P 500"), linewidth = 1) +
scale_color_manual(values = c("DIS" = "blue", "S&P 500" = "red")) +
scale_x_date(date_breaks = "6 months", date_labels = "%Y-%m") +
scale_y_continuous(breaks = seq(0, 2, by = 0.1)) +
labs(
title = "Growth of $1 Investment (1/2/2021-12/31/2024)",
x = "Date",
y = "Value of Investment ($)",
color = "Investment"
) +
theme(plot.title = element_text(hjust = 0.5))
plot
dis_stock1 = dis_stock %>%
filter(year(date) == 2024)
highchart() %>%
hc_add_series(
data = dis_stock1,
mapping = hcaes(x = date, y = open),
type = 'line',
name = 'Open',
color = 'red'
) %>%
hc_add_series(
data = dis_stock1,
mapping = hcaes(x = date, y = high),
type = 'line',
name = 'High',
color = 'blue'
) %>%
hc_add_series(
data = dis_stock1,
mapping = hcaes(x = date, y = low),
type = 'line',
name = 'Low',
color = 'green'
) %>%
hc_add_series(
data = dis_stock1,
mapping = hcaes(x = date, y = close),
type = 'line',
name = 'Close',
color = 'purple'
) %>%
hc_xAxis(title = list(text = '2024 Trading Day')) %>%
hc_yAxis(title = list(text = 'Share Price')) %>%
hc_title(text = "Disney Intra-Day Stock Price") %>%
hc_legend(
align = "right",
verticalAlign = "middle",
layout = "vertical"
)
our_team = c('Arnold Jiang', 'John Woo', 'Tong Dai', 'Willow Yang')
our_team
#| message: false
library(tidyverse)
library(highcharter)
library(gt)
#| message: false
dis_movies = read_csv(file = 'https://www.dropbox.com/scl/fi/q5tot6ylmqvzyv1ve73jk/dis_movies.csv?rlkey=i6nrb7htoimm025kxxitegue9&st=ha0pbdxj&raw=1')
dis_25 <- dis_movies %>%
mutate(
total_worldwide = box_dom + box_int,
box_dom =round(box_dom / 1e6, digits = 2),
box_int = round(box_int / 1e6, digits = 2),
total_worldwide = round(total_worldwide / 1e6, digits = 2)
) %>%
slice_max(n = 25, total_worldwide) %>%
gt() %>%
tab_header(
title = "Top 25 movies based on worldwide box office revenue"
) %>%
cols_label(
yor = html("Year of Release"),
movie = html("Movie Name"),
box_dom = html("Domestic Revenue (Million USD)"),
box_int = html("International Revenue (Million USD)"),
total_worldwide = html("Worldwide Revenue (Million USD)")
) %>%
opt_stylize(style = 6, color = "cyan")
dis_25
dis_100 <- dis_movies %>%
mutate(
total_worldwide = box_dom + box_int,
percentage = box_int / total_worldwide * 100,
) %>%
arrange(desc(percentage)) %>%
filter(row_number() <= 100)
dis_10 <- dis_100 %>%
top_n(10, percentage) %>%
select(yor, movie, box_dom, box_int) %>%
gt() %>%
tab_header(
title = "Top 10 Movies with the Greatest Portion of Their Worldwide Box Office Revenue From International Sales"
) %>%
cols_label(
yor = html("Year of Release"),
movie = html("Movie Name"),
box_dom = html("Domestic Revenue"),
box_int = html("International Revenue")
) %>%
opt_stylize(style = 6, color = "red")
dis_10
dis_movies <- dis_movies %>%
mutate(
box_dom_adj = box_dom * (1 + 0.03)^{(2024-yor)/(1.5)}
)
dis_movies %>%
gt() %>%
tab_header(
title = "Disney Movies with Domestic Box Office Revenue Adjusted for Inflation"
) %>%
cols_label(
yor = html("Year of Release"),
movie = html("Movie Name"),
box_dom = html("Domestic Revenue"),
box_int = html("International Revenue"),
box_dom_adj = html("Domestic Revenue (Adjusted)")
) %>%
opt_stylize(style = 6, color = "blue")
two_thousands_movies <- dis_movies |>
filter(yor >= 2000 & yor <= 2009)
min_box = min(two_thousands_movies$box_dom_adj)
max_box = max(two_thousands_movies$box_dom_adj)
two_thousands_movies |>
ggplot(aes(x = yor, y = box_dom_adj, color = box_dom_adj)) +
geom_point() +
labs(title = "Inflation-Adjusted Domestic Revenue of Movies Released in 2000-2009",
x = 'Year of Release',
y = 'Domestic Box Office (Adjusted)') +
lims(y = c(min_box, max_box)) +
scale_x_continuous(breaks = seq(2000, 2009, 1)) +
scale_color_gradient(low = 'lightblue', high = 'blue') +
theme(
plot.title = element_text(color = 'purple'),
axis.title.x = element_text(color = 'purple'),
axis.title.y = element_text(color = 'purple'),
)
filtered_movies_2 <- dis_movies |>
filter(yor >= 2019 & yor <= 2023)
box_int_by_year <- filtered_movies_2 |>
group_by(yor) |>
summarise(year_box_int = sum(box_int))
box_int_by_year |>
hchart(
hcaes(
x = yor,
y = year_box_int
),
type = "column",
name = "Box Office Revenue of Disney Movies"
) |>
hc_title(text = "Trends in International Revenue of Disney Movies from 2019-2023") |>
hc_xAxis(title = list(text = "Year Of Release")) |>
hc_yAxis(title = list(text = "International Revenue (Billions)"))
# We chose 2019 to 2023 because we wanted to see what impact Covid
# had on international Revenue of Disney Movies
paste("We chose 2019 to 2023 because we wanted to see what ")
paste("impact Covid had on international Revenue of Disney Movies.")
#| message: false
dis_plus = read_csv(file = 'https://www.dropbox.com/scl/fi/5kt0kzhnpop3ub9qavnzm/dis_plus.csv?rlkey=b3eqvyhthfpgxxd7sdzzru00y&st=aw0bree0&raw=1')
dis_plus <- dis_plus |>
mutate(qtr_over_qtr_growth = round((dis_subs - lag(dis_subs)) / dis_subs * 100, 3)) |>
mutate(qtr_over_qtr_growth = ifelse(is.na(qtr_over_qtr_growth), 0, qtr_over_qtr_growth))
greatest_growth_year <- dis_plus |>
filter(qtr_over_qtr_growth == max(qtr_over_qtr_growth, na.rm = T)) |>
pull(year)
greatest_growth_qtr <- dis_plus |>
filter(qtr_over_qtr_growth == max(qtr_over_qtr_growth, na.rm = T)) |>
pull(qtr)
# the greatest rate of growth happened during year 2020 qtr 3.
paste("The greatest rate of growth happened during year", greatest_growth_year, "qtr", greatest_growth_qtr)
dis_plus |>
gt() |>
tab_header(
title = "Quarter-Over-Quarter Growth Rate for Each Pair of Consecutive Quarter"
) |>
cols_label(
year = html("Year"),
qtr = html("Quarter"),
dis_subs = html("Disney Subscribers (in Millions)"),
nflx_subs = html("Netflix Subscribers (in Millions)"),
qtr_over_qtr_growth = html("Quarter-Over-Quarter Growth Rate")
) |>
opt_stylize(style = 6, color = "green")
annualized_sum <- dis_plus |>
group_by(year) |>
summarise(avg_qtr_subs = sum(dis_subs) / 4,
highest_qtr_subs = max(dis_subs),
lowest_qtr_subs = min(dis_subs),
range_qtr_subs = highest_qtr_subs - lowest_qtr_subs,
)
annualized_sum |>
gt() |>
tab_header(
title = "Annualized Summaries for Disney+ Subscribers (in Millions)"
) |>
cols_label(
year = html("Year"),
avg_qtr_subs = html("Average Quarterly Subscribers"),
highest_qtr_subs = html("Highest Quarterly Subscribers"),
lowest_qtr_subs = html("Lowest Quarterly Subscribers"),
range_qtr_subs = html("Range of Quarterly Subscribers"),
) |>
opt_stylize(style = 6, color = "blue")
dis_plus <- dis_plus |>
mutate(year_qtr = paste0("Q", qtr, "-", year))
highchart() |>
hc_add_series(
data = dis_plus,
mapping = hcaes(x = year_qtr, y = dis_subs),
type = 'line',
color = 'orange',
yAxis = 0,
name = "Disney+ Subscribers (Millions)"
) |>
hc_add_series(
data = dis_plus,
mapping = hcaes(x = year_qtr, y = nflx_subs),
type = 'line',
color = 'red',
yAxis = 1,
name = "Subscriber Counts for Disney+ and Netflix"
) |>
hc_yAxis_multiples(
list(
title = list(
text = 'Disney+ Subscribers (in Millions)',
style = list(color = "orange")
)
),
list(
opposite = TRUE,
title = list(
text = 'Netflix Subscribers (in Millions)',
style = list(color = "red")
)
)
) |>
hc_title(
text = "Subscriber Counts for Disney+ and Netflix",
align = "center"
) |>
hc_xAxis(
title = list(text = "Year and Quarter"),
categories = unique(dis_plus$year_qtr),
tickInterval = 1
) |>
hc_legend(
align = "left",
verticalAlign = "bottom"
)
#| message: false
dis_stock = read_csv(file = 'https://www.dropbox.com/scl/fi/x25yj3rp81dn1tipguqk5/dis_stock.csv?rlkey=6j7gkdei81aipn0kem0i34tit&st=rps4871p&raw=1')
filtered_dis_stocks <- dis_stock |>
mutate(percentage = ((close - open) / open) * 100 ) |>
filter(percentage >= 5 | percentage <= -5)
filtered_dis_stocks |>
gt() |>
tab_header(
title = "Trading Days of DIS Stocks with at least 5% Gain or Loss"
) |>
cols_label(
date = html("Date"),
open = html("Open"),
high = html("High"),
low = html("Low"),
close = html("Close"),
volume = html("Volume"),
spx = html("SPX"),
shrsout = html("Outstanding Shares"),
percentage = html("Chang Over 5%")
) |>
opt_stylize(style = 6, color = "pink")
dis_stock_with_market_cap <-  dis_stock |>
mutate(market_cap = close * shrsout,
date_movement = abs(market_cap - lag(market_cap)))
dis_stock_with_market_cap <- dis_stock_with_market_cap |>
mutate(date_movement = ifelse(is.na(date_movement), 0, date_movement))
peak_market_cap_date = dis_stock_with_market_cap |>
filter(market_cap == max(market_cap)) |>
pull(date)
# the market capitalization of DIS was at its peak on 2021-03-08
paste("The market capitalization of DIS was at its peak on", peak_market_cap_date)
greatest_monthly_movement <- dis_stock_with_market_cap |>
filter(date_movement == max(date_movement)) |>
pull(date)
# the greatest movement of market cap happened in Decemeber of 2020, specifically on 2020-12-10
paste("The greatest movement of market cap happened in Decemeber of 2020, specifically on", greatest_monthly_movement)
dis_stock_dup <- dis_stock %>%
filter(date >= as.Date("2021-01-02"))
init_dis_price <- dis_stock_dup %>%
first(dis_stock_dup) %>%
pull(close)
init_spx_price <- dis_stock_dup %>%
first(dis_stock_dup) %>%
pull(spx)
dis_shares <- 1 / init_dis_price
spx_shares <- 1 / init_spx_price
stock <- dis_stock %>%
filter(date >= as.Date("2021-01-02") & date <= as.Date("2024-12-31")) %>%
mutate(
dis_growth = dis_shares * close,
spx_growth = spx_shares * spx,
) %>%
select(date, dis_growth, spx_growth)
plot <- stock %>%
ggplot(aes(x = date)) +
geom_line(aes(y = dis_growth, color = "DIS"), linewidth = 1) +
geom_line(aes(y = spx_growth, color = "S&P 500"), linewidth = 1) +
scale_color_manual(values = c("DIS" = "blue", "S&P 500" = "red")) +
scale_x_date(date_breaks = "6 months", date_labels = "%Y-%m") +
scale_y_continuous(breaks = seq(0, 2, by = 0.1)) +
labs(
title = "Growth of $1 Investment (1/2/2021-12/31/2024)",
x = "Date",
y = "Value of Investment ($)",
color = "Investment"
) +
theme(plot.title = element_text(hjust = 0.5))
plot
dis_stock1 = dis_stock %>%
filter(year(date) == 2024)
highchart() %>%
hc_add_series(
data = dis_stock1,
mapping = hcaes(x = date, y = open),
type = 'line',
name = 'Open',
color = 'red'
) %>%
hc_add_series(
data = dis_stock1,
mapping = hcaes(x = date, y = high),
type = 'line',
name = 'High',
color = 'blue'
) %>%
hc_add_series(
data = dis_stock1,
mapping = hcaes(x = date, y = low),
type = 'line',
name = 'Low',
color = 'green'
) %>%
hc_add_series(
data = dis_stock1,
mapping = hcaes(x = date, y = close),
type = 'line',
name = 'Close',
color = 'purple'
) %>%
hc_xAxis(title = list(text = '2024 Trading Day')) %>%
hc_yAxis(title = list(text = 'Share Price')) %>%
hc_title(text = "Disney Intra-Day Stock Price") %>%
hc_legend(
align = "right",
verticalAlign = "middle",
layout = "vertical"
)
